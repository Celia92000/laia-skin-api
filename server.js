const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const nodemailer = require('nodemailer');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
require('dotenv').config();

// JWT Secret pour les tokens
const JWT_SECRET = process.env.JWT_SECRET || 'laia_skin_secret_key_2025';

// Configuration du transporteur email
const emailTransporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST || 'smtp.live.com',
    port: process.env.EMAIL_PORT || 587,
    secure: false,
    auth: {
        user: process.env.EMAIL_USER || 'votre-email@hotmail.fr',
        pass: process.env.EMAIL_PASS || 'votre-mot-de-passe-app'
    }
});

// Configuration WhatsApp Business API
const WHATSAPP_CONFIG = {
    phoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID || 'YOUR_PHONE_NUMBER_ID',
    accessToken: process.env.WHATSAPP_ACCESS_TOKEN || 'YOUR_ACCESS_TOKEN',
    apiVersion: 'v18.0',
    baseUrl: 'https://graph.facebook.com'
};

// Fonction pour envoyer un message WhatsApp
async function sendWhatsAppMessage(to, templateName, templateParams = []) {
    try {
        const url = `${WHATSAPP_CONFIG.baseUrl}/${WHATSAPP_CONFIG.apiVersion}/${WHATSAPP_CONFIG.phoneNumberId}/messages`;
        
        const payload = {
            messaging_product: "whatsapp",
            to: to.replace(/\D/g, ''), // Supprimer tous les caract√®res non num√©riques
            type: "template",
            template: {
                name: templateName,
                language: {
                    code: "fr"
                },
                components: templateParams.length > 0 ? [{
                    type: "body",
                    parameters: templateParams.map(param => ({
                        type: "text",
                        text: param
                    }))
                }] : []
            }
        };

        const response = await axios.post(url, payload, {
            headers: {
                'Authorization': `Bearer ${WHATSAPP_CONFIG.accessToken}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ WhatsApp envoy√©:', response.data);
        return { success: true, messageId: response.data.messages[0].id };

    } catch (error) {
        console.error('‚ùå Erreur WhatsApp:', error.response?.data || error.message);
        return { success: false, error: error.response?.data || error.message };
    }
}

// Fonction pour envoyer un message WhatsApp simple (pour tests)
async function sendWhatsAppText(to, text) {
    try {
        const url = `${WHATSAPP_CONFIG.baseUrl}/${WHATSAPP_CONFIG.apiVersion}/${WHATSAPP_CONFIG.phoneNumberId}/messages`;
        
        const payload = {
            messaging_product: "whatsapp",
            to: to.replace(/\D/g, ''),
            type: "text",
            text: {
                body: text
            }
        };

        const response = await axios.post(url, payload, {
            headers: {
                'Authorization': `Bearer ${WHATSAPP_CONFIG.accessToken}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ WhatsApp texte envoy√©:', response.data);
        return { success: true, messageId: response.data.messages[0].id };

    } catch (error) {
        console.error('‚ùå Erreur WhatsApp texte:', error.response?.data || error.message);
        return { success: false, error: error.response?.data || error.message };
    }
}

// Fonction pour envoyer l'email de confirmation
// Fonction utilitaire pour obtenir l'emoji du service
function getServiceEmoji(serviceCategory) {
    const serviceEmojis = {
        hydronaissance: 'üåü',
        bb_glow: '‚ú®', 
        hydro_cleaning: 'üíß',
        microneedling: 'üîÑ',
        led_therapie: 'üí°'
    };
    return serviceEmojis[serviceCategory] || 'üåü';
}

async function sendConfirmationEmail(booking, appointment, isNewAccount = false) {
    try {
        const appointmentDate = new Date(appointment.datetime);
        const formattedDate = appointmentDate.toLocaleDateString('fr-FR', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const formattedTime = appointmentDate.toLocaleTimeString('fr-FR', {
            hour: '2-digit',
            minute: '2-digit'
        });

        const emailHtml = `
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Confirmation de r√©servation - LAIA SKIN INSTITUT</title>
            <style>
                @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&family=Lora:wght@400;500&display=swap');
                
                body {
                    font-family: 'Lora', serif;
                    line-height: 1.6;
                    color: #2c3e50;
                    background: linear-gradient(135deg, #fdfbf7, #f8f6f0);
                    margin: 0;
                    padding: 20px;
                }
                
                .email-container {
                    max-width: 600px;
                    margin: 0 auto;
                    background: white;
                    border-radius: 20px;
                    overflow: hidden;
                    box-shadow: 0 20px 60px rgba(0,0,0,0.1);
                }
                
                .header {
                    background: linear-gradient(135deg, #d4b5a0, #c9a084);
                    color: white;
                    padding: 2rem;
                    text-align: center;
                }
                
                .header h1 {
                    font-family: 'Playfair Display', serif;
                    font-size: 2rem;
                    margin: 0;
                    text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                }
                
                .content {
                    padding: 2rem;
                }
                
                .greeting {
                    font-size: 1.1rem;
                    margin-bottom: 1.5rem;
                    color: #c9a084;
                    font-weight: 500;
                }
                
                .appointment-details {
                    background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(255,248,220,0.8));
                    border: 2px solid rgba(212, 181, 160, 0.3);
                    border-radius: 15px;
                    padding: 1.5rem;
                    margin: 1.5rem 0;
                }
                
                .detail-row {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 0.8rem;
                    padding-bottom: 0.5rem;
                    border-bottom: 1px solid rgba(212, 181, 160, 0.2);
                }
                
                .detail-row:last-child {
                    border-bottom: none;
                    margin-bottom: 0;
                    font-weight: bold;
                }
                
                .detail-label {
                    color: #5a6c7d;
                    font-weight: 500;
                }
                
                .detail-value {
                    color: #2c3e50;
                    font-weight: 600;
                }
                
                .login-info {
                    background: rgba(40, 167, 69, 0.1);
                    border: 2px solid rgba(40, 167, 69, 0.2);
                    border-radius: 15px;
                    padding: 1.5rem;
                    margin: 1.5rem 0;
                }
                
                .login-info h3 {
                    color: #28a745;
                    margin-top: 0;
                    font-family: 'Playfair Display', serif;
                }
                
                .credentials {
                    background: rgba(255,255,255,0.8);
                    padding: 1rem;
                    border-radius: 10px;
                    margin: 1rem 0;
                    border-left: 4px solid #28a745;
                }
                
                .btn {
                    display: inline-block;
                    background: linear-gradient(135deg, #D4AF37, #B8860B, #DAA520);
                    color: white;
                    padding: 1rem 2rem;
                    text-decoration: none;
                    border-radius: 25px;
                    font-weight: 500;
                    text-align: center;
                    margin: 1rem 0;
                    box-shadow: 0 8px 25px rgba(212, 175, 55, 0.4);
                }
                
                .important-notes {
                    background: rgba(255, 193, 7, 0.1);
                    border: 2px solid rgba(255, 193, 7, 0.3);
                    border-radius: 15px;
                    padding: 1.5rem;
                    margin: 1.5rem 0;
                }
                
                .footer {
                    background: #f8f9fa;
                    padding: 1.5rem;
                    text-align: center;
                    color: #666;
                    font-size: 0.9rem;
                    border-top: 1px solid #e9ecef;
                }
                
                .contact-info {
                    margin-top: 1rem;
                }
                
                @media (max-width: 600px) {
                    .detail-row {
                        flex-direction: column;
                        text-align: center;
                    }
                    .detail-label {
                        margin-bottom: 0.3rem;
                    }
                }
            </style>
        </head>
        <body>
            <div class="email-container">
                <div class="header">
                    <h1>üå∏ LAIA SKIN INSTITUT üå∏</h1>
                    <p>Votre r√©servation est confirm√©e</p>
                </div>
                
                <div class="content">
                    <div class="greeting">
                        Bonjour ${booking.firstName} ${booking.lastName},
                    </div>
                    
                    <p>Nous avons le plaisir de confirmer votre r√©servation. Votre acompte de 60‚Ç¨ a √©t√© trait√© avec succ√®s.</p>
                    
                    <div class="appointment-details">
                        <div class="detail-row">
                            <span class="detail-label">Service :</span>
                            <span class="detail-value">${getServiceEmoji(appointment.service.category)} ${appointment.service.name}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Date :</span>
                            <span class="detail-value">${formattedDate}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Heure :</span>
                            <span class="detail-value">${formattedTime}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Dur√©e :</span>
                            <span class="detail-value">${appointment.service.duration} minutes</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Prix total :</span>
                            <span class="detail-value">${appointment.pricing.servicePrice}‚Ç¨</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Paiement :</span>
                            <span class="detail-value">${appointment.pricing.servicePrice}‚Ç¨ en esp√®ces le jour J</span>
                        </div>
                    </div>
                    
                    ${isNewAccount ? `
                    <div class="login-info">
                        <h3>üîë Vos identifiants de connexion</h3>
                        <p>Votre compte client a √©t√© cr√©√© avec succ√®s ! Vous pouvez maintenant acc√©der √† votre espace personnel pour suivre vos rendez-vous :</p>
                        
                        <div class="credentials">
                            <strong>Email :</strong> ${booking.email}<br>
                            <strong>Mot de passe :</strong> ${booking.password}
                        </div>
                        
                        <a href="http://localhost:3001/espace-client.html" class="btn">
                            üîë Acc√©der √† votre espace client
                        </a>
                        
                        <p><small>‚ö†Ô∏è Conservez pr√©cieusement ces identifiants. Nous vous recommandons de changer votre mot de passe lors de votre premi√®re connexion.</small></p>
                    </div>
                    ` : `
                    <div class="login-info">
                        <h3>üîë Votre espace client</h3>
                        <p>Connectez-vous √† votre espace client pour suivre vos rendez-vous :</p>
                        <a href="http://localhost:3001/espace-client.html" class="btn">
                            üîë Acc√©der √† votre espace client
                        </a>
                    </div>
                    `}
                    
                    <div class="important-notes">
                        <h3>üìã Informations importantes</h3>
                        <ul>
                            <li><strong>üí∞ Paiement :</strong> Apportez 120‚Ç¨ en esp√®ces le jour du rendez-vous (pr√©voir l'appoint)</li>
                            <li><strong>üìßüì± Confirmation obligatoire :</strong> Nous vous contacterons par email et WhatsApp 24h avant pour confirmation</li>
                            <li><strong>‚è∞ Annulation :</strong> Possible jusqu'√† 48h avant le rendez-vous</li>
                            <li><strong>üïê Retard :</strong> Au-del√† de 15 minutes, le soin pourra √™tre √©court√©</li>
                            <li><strong>‚òÄÔ∏è Pr√©paration :</strong> √âvitez l'exposition au soleil 48h avant votre soin</li>
                        </ul>
                    </div>
                    
                    <div style="background: rgba(212, 181, 160, 0.1); padding: 1.5rem; border-radius: 15px; margin: 1.5rem 0; text-align: center;">
                        <h3 style="color: #c9a084; margin-bottom: 1rem;">üîß G√©rer votre rendez-vous</h3>
                        <p style="margin-bottom: 1.5rem; font-size: 0.95rem;">Besoin de modifier ou annuler votre rendez-vous ?</p>
                        <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                            <a href="http://localhost:3000/confirm-appointment?id=${appointment._id}&action=reschedule" style="background: #fd7e14; color: white; padding: 0.8rem 1.5rem; border-radius: 20px; text-decoration: none; font-weight: 500; display: flex; align-items: center; gap: 0.5rem; transition: all 0.3s ease;">
                                üìÖ Reporter mon RDV
                            </a>
                            <a href="http://localhost:3000/confirm-appointment?id=${appointment._id}&action=cancel" style="background: #dc3545; color: white; padding: 0.8rem 1.5rem; border-radius: 20px; text-decoration: none; font-weight: 500; display: flex; align-items: center; gap: 0.5rem; transition: all 0.3s ease;">
                                ‚ùå Annuler mon RDV
                            </a>
                        </div>
                        <p style="margin-top: 1rem; font-size: 0.8rem; color: #666;">Ces liens restent actifs jusqu'√† 48h avant votre rendez-vous</p>
                    </div>
                    
                    <p>Nous avons h√¢te de vous accueillir dans notre institut pour ce moment de d√©tente et de beaut√©.</p>
                    
                    <p style="margin-top: 2rem;">
                        Bien √† vous,<br>
                        <strong>L'√©quipe LAIA SKIN INSTITUT</strong>
                    </p>
                </div>
                
                <div class="footer">
                    <div class="contact-info">
                        <strong>LAIA SKIN INSTITUT</strong><br>
                        üìç [Votre adresse]<br>
                        üìû [Votre t√©l√©phone]<br>
                        üìß contact@laiaskin.com<br>
                        üåê www.laiaskin.com
                    </div>
                    
                    <p style="margin-top: 1rem;">
                        Cet email a √©t√© envoy√© automatiquement, merci de ne pas y r√©pondre.<br>
                        Pour toute question, contactez-nous directement.
                    </p>
                </div>
            </div>
        </body>
        </html>
        `;

        const mailOptions = {
            from: `"LAIA SKIN INSTITUT" <${process.env.EMAIL_USER || 'noreply@laiaskin.com'}>`,
            to: booking.email,
            subject: `‚úÖ R√©servation confirm√©e - ${formattedDate} √† ${formattedTime}`,
            html: emailHtml,
            text: `
Bonjour ${booking.firstName} ${booking.lastName},

Votre r√©servation est confirm√©e !

Service: ${getServiceEmoji(appointment.service.category)} ${appointment.service.name}
Date: ${formattedDate}
Heure: ${formattedTime}
Dur√©e: ${appointment.service.duration} minutes
Prix total: ${appointment.pricing.servicePrice}‚Ç¨
Paiement: ${appointment.pricing.servicePrice}‚Ç¨ en esp√®ces le jour J

${isNewAccount ? `
VOS IDENTIFIANTS DE CONNEXION:
Email: ${booking.email}
Mot de passe: ${booking.password}
Acc√©dez √† votre espace: http://localhost:3001/espace-client.html
` : ''}

INFORMATIONS IMPORTANTES:
- üí∞ PAIEMENT: Apportez 120‚Ç¨ en esp√®ces le jour du rendez-vous (pr√©voir l'appoint)
- üìßüì± CONFIRMATION: Nous vous contacterons par email et WhatsApp 24h avant
- ‚è∞ Annulation possible jusqu'√† 48h avant
- ‚òÄÔ∏è √âvitez l'exposition au soleil 48h avant votre soin

Merci de votre confiance,
L'√©quipe LAIA SKIN INSTITUT
            `
        };

        const info = await emailTransporter.sendMail(mailOptions);
        console.log('‚úÖ Email de confirmation envoy√©:', info.messageId);
        return true;

    } catch (error) {
        console.error('‚ùå Erreur envoi email:', error);
        return false;
    }
}

// Fonction pour envoyer un rappel 24h avant
async function sendReminderEmail(appointment, user) {
    try {
        const appointmentDate = new Date(appointment.datetime);
        const formattedDate = appointmentDate.toLocaleDateString('fr-FR', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const formattedTime = appointmentDate.toLocaleTimeString('fr-FR', {
            hour: '2-digit',
            minute: '2-digit'
        });

        const emailHtml = `
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <title>Rappel rendez-vous - LAIA SKIN INSTITUT</title>
            <style>
                body { font-family: 'Lora', serif; line-height: 1.6; color: #2c3e50; background: #fdfbf7; margin: 0; padding: 20px; }
                .container { max-width: 500px; margin: 0 auto; background: white; border-radius: 20px; padding: 2rem; box-shadow: 0 20px 60px rgba(0,0,0,0.1); }
                .header { background: linear-gradient(135deg, #d4b5a0, #c9a084); color: white; padding: 1.5rem; text-align: center; border-radius: 15px; margin-bottom: 2rem; }
                .appointment-info { background: rgba(255, 193, 7, 0.1); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; text-align: center; }
                .confirm-buttons { text-align: center; margin: 2rem 0; }
                .btn { display: inline-block; padding: 1rem 2rem; margin: 0.5rem; border-radius: 25px; text-decoration: none; font-weight: bold; }
                .btn-confirm { background: #28a745; color: white; }
                .btn-cancel { background: #dc3545; color: white; }
                .payment-reminder { background: rgba(40, 167, 69, 0.1); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üå∏ LAIA SKIN INSTITUT üå∏</h1>
                    <p>Rappel de votre rendez-vous demain</p>
                </div>
                
                <p>Bonjour ${user.name},</p>
                
                <p>Nous vous rappelons votre rendez-vous pr√©vu <strong>demain</strong> :</p>
                
                <div class="appointment-info">
                    <h3>${getServiceEmoji(appointment.service.category)} ${appointment.service.name}</h3>
                    <p><strong>üìÖ ${formattedDate}</strong></p>
                    <p><strong>üïê ${formattedTime}</strong></p>
                    <p><strong>‚è±Ô∏è Dur√©e : ${appointment.service.duration} minutes</strong></p>
                </div>
                
                <div class="payment-reminder">
                    <p><strong>üí∞ N'oubliez pas :</strong> Apportez ${appointment.pricing.servicePrice}‚Ç¨ en esp√®ces (pr√©voir l'appoint)</p>
                </div>
                
                <div class="confirm-buttons">
                    <h3>‚ö†Ô∏è CONFIRMATION OBLIGATOIRE ‚ö†Ô∏è</h3>
                    <p>Merci de confirmer votre pr√©sence en cliquant sur l'un des boutons :</p>
                    <a href="http://localhost:3000/confirm-appointment?id=${appointment._id}&action=confirm" class="btn btn-confirm">
                        ‚úÖ Je confirme ma pr√©sence
                    </a>
                    <a href="http://localhost:3000/confirm-appointment?id=${appointment._id}&action=reschedule" class="btn btn-reschedule" style="background: #fd7e14; color: white;">
                        üìÖ Reporter mon RDV
                    </a>
                    <a href="http://localhost:3000/confirm-appointment?id=${appointment._id}&action=cancel" class="btn btn-cancel">
                        ‚ùå J'annule mon RDV
                    </a>
                </div>
                
                <p style="margin-top: 2rem; font-size: 0.9rem; color: #666;">
                    <strong>Important :</strong> Sans confirmation, votre cr√©neau pourra √™tre lib√©r√© pour d'autres clients.
                </p>
                
                <p style="margin-top: 2rem;">
                    √Ä tr√®s bient√¥t,<br>
                    <strong>L'√©quipe LAIA SKIN INSTITUT</strong>
                </p>
            </div>
        </body>
        </html>
        `;

        const mailOptions = {
            from: `"LAIA SKIN INSTITUT" <${process.env.EMAIL_USER || 'noreply@laiaskin.com'}>`,
            to: user.email,
            subject: `‚è∞ Rappel : RDV demain ${formattedTime} - Confirmation requise`,
            html: emailHtml,
            text: `
Rappel rendez-vous demain - LAIA SKIN INSTITUT

Bonjour ${user.name},

Votre rendez-vous ${appointment.service.name} est pr√©vu demain :
üìÖ ${formattedDate}
üïê ${formattedTime}
‚è±Ô∏è Dur√©e : ${appointment.service.duration} minutes

üí∞ N'oubliez pas : ${appointment.pricing.servicePrice}‚Ç¨ en esp√®ces (pr√©voir l'appoint)

‚ö†Ô∏è CONFIRMATION OBLIGATOIRE
R√©pondez √† ce message pour confirmer votre pr√©sence.
Sans confirmation, le cr√©neau pourra √™tre lib√©r√©.

√Ä tr√®s bient√¥t,
L'√©quipe LAIA SKIN INSTITUT
            `
        };

        const info = await emailTransporter.sendMail(mailOptions);
        console.log('‚úÖ Email de rappel envoy√©:', info.messageId);
        return true;

    } catch (error) {
        console.error('‚ùå Erreur envoi rappel email:', error);
        return false;
    }
}

// Fonction pour envoyer un rappel WhatsApp
async function sendWhatsAppReminder(appointment, user) {
    try {
        const appointmentDate = new Date(appointment.datetime);
        const formattedDate = appointmentDate.toLocaleDateString('fr-FR');
        const formattedTime = appointmentDate.toLocaleTimeString('fr-FR', {
            hour: '2-digit',
            minute: '2-digit'
        });

        // Utiliser le template approuv√© par Meta (√† cr√©er)
        const templateName = 'rappel_rdv_laia_skin';
        const templateParams = [
            user.name, // {{1}}
            formattedDate, // {{2}}
            formattedTime, // {{3}}
            'Hydro\'Naissance', // {{4}}
            '120‚Ç¨' // {{5}}
        ];

        const result = await sendWhatsAppMessage(user.phone, templateName, templateParams);
        
        if (result.success) {
            console.log(`‚úÖ WhatsApp rappel envoy√© √† ${user.name}: ${result.messageId}`);
        } else {
            console.error(`‚ùå √âchec WhatsApp rappel pour ${user.name}:`, result.error);
        }

        return result;

    } catch (error) {
        console.error('‚ùå Erreur fonction WhatsApp rappel:', error);
        return { success: false, error: error.message };
    }
}

// Fonction pour programmer le rappel automatique
function scheduleReminder(appointment, user) {
    const appointmentDate = new Date(appointment.datetime);
    const reminderDate = new Date(appointmentDate.getTime() - 24 * 60 * 60 * 1000); // 24h avant
    const now = new Date();
    
    if (reminderDate > now) {
        const delay = reminderDate.getTime() - now.getTime();
        
        setTimeout(async () => {
            console.log(`‚è∞ Envoi rappel pour RDV ${appointment._id}`);
            
            // Envoyer l'email de rappel
            await sendReminderEmail(appointment, user);
            
            // Envoyer le WhatsApp de rappel
            await sendWhatsAppReminder(appointment, user);
            
        }, delay);
        
        console.log(`‚è∞ Rappel programm√© pour ${reminderDate.toLocaleString('fr-FR')}`);
    }
}

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// === CONNEXION MONGODB ===
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => {
    console.log('‚úÖ Connect√© √† MongoDB Atlas');
})
.catch((error) => {
    console.error('‚ùå Erreur de connexion MongoDB:', error);
});

// === MOD√àLES ===
const Loyalty = require('./models/Loyalty');

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    phone: { type: String },
    role: { type: String, enum: ['client', 'admin'], default: 'client' },
    skinType: { type: String },
    allergies: [String],
    createdAt: { type: Date, default: Date.now }
});

const appointmentSchema = new mongoose.Schema({
    client: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    datetime: { type: Date, required: true },
    duration: { type: Number, required: true }, // en minutes
    status: { type: String, enum: ['confirm√©', 'en_attente', 'annul√©', 'termin√©'], default: 'confirm√©' },
    service: {
        name: { type: String, required: true },
        category: { type: String, required: true },
        duration: { type: Number, required: true }
    },
    paymentStatus: { type: String, enum: ['non_pay√©', 'acompte_pay√©', 'pay√©'], default: 'non_pay√©' },
    pricing: {
        servicePrice: { type: Number, required: true },
        deposit: { type: Number, default: 0 },
        totalPaid: { type: Number, default: 0 }
    },
    notes: {
        client: { type: String, default: '' },
        admin: { type: String, default: '' }
    },
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);
const Appointment = mongoose.model('Appointment', appointmentSchema);

// Sch√©ma pour les notifications admin en temps r√©el
const adminNotificationSchema = new mongoose.Schema({
    appointmentId: { type: mongoose.Schema.Types.ObjectId, ref: 'Appointment', required: true },
    action: { type: String, enum: ['confirm', 'cancel', 'reschedule'], required: true },
    clientName: { type: String, required: true },
    timestamp: { type: Date, default: Date.now },
    read: { type: Boolean, default: false }
});

const AdminNotification = mongoose.model('AdminNotification', adminNotificationSchema);

// Sch√©ma pour les services
const serviceSchema = new mongoose.Schema({
    key: { type: String, required: true, unique: true }, // ex: "led_therapie"
    name: { type: String, required: true }, // ex: "üí° LED Th√©rapie"
    description: { type: String, required: true },
    price: { type: Number, required: true },
    duration: { type: Number, required: true }, // en minutes
    preparationTime: { type: Number, default: 15 }, // temps de pr√©paration
    totalDuration: { type: Number }, // calcul√© automatiquement
    emoji: { type: String, default: '‚ú®' },
    label: { type: String, required: true },
    active: { type: Boolean, default: true },
    category: { type: String, default: 'soin' },
    order: { type: Number, default: 0 }, // pour l'ordre d'affichage
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
});

// Middleware pour calculer totalDuration automatiquement
serviceSchema.pre('save', function(next) {
    this.totalDuration = this.duration + this.preparationTime;
    this.updatedAt = new Date();
    next();
});

const Service = mongoose.model('Service', serviceSchema);

// Sch√©ma pour la gestion du contenu du site
const siteContentSchema = new mongoose.Schema({
    key: { type: String, required: true, unique: true }, // identifiant unique (ex: hero_title)
    value: { type: String, required: true }, // contenu (texte)
    type: { type: String, enum: ['text', 'html', 'image'], default: 'text' },
    section: { type: String, required: true }, // section du site (hero, services, contact, etc.)
    description: { type: String }, // description pour l'admin
    updatedAt: { type: Date, default: Date.now }
});

siteContentSchema.pre('save', function(next) {
    this.updatedAt = new Date();
    next();
});

const SiteContent = mongoose.model('SiteContent', siteContentSchema);

// === ROUTES AUTH ===
// Route pour v√©rifier si un email existe
app.post('/api/auth/check-email', async (req, res) => {
    try {
        const { email } = req.body;
        
        if (!email) {
            return res.status(400).json({ error: 'Email requis' });
        }
        
        const user = await User.findOne({ email: email.toLowerCase() });
        
        res.json({
            exists: !!user,
            email: email.toLowerCase()
        });
    } catch (error) {
        console.error('Erreur v√©rification email:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

app.post('/api/auth/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        console.log(`üîê Tentative connexion: ${email}`);
        
        const user = await User.findOne({ email: email.toLowerCase() });
        
        if (user && await bcrypt.compare(password, user.password)) {
            console.log(`‚úÖ Connexion r√©ussie: ${user.name}`);
            
            // G√©n√©rer un vrai token JWT
            const token = jwt.sign(
                { userId: user._id, email: user.email, role: user.role },
                JWT_SECRET,
                { expiresIn: '24h' }
            );
            
            res.json({
                message: 'Connexion r√©ussie',
                token: token,
                user: {
                    _id: user._id,
                    name: user.name,
                    email: user.email,
                    phone: user.phone,
                    role: user.role,
                    createdAt: user.createdAt
                }
            });
        } else {
            console.log(`‚ùå √âchec connexion: ${email}`);
            res.status(401).json({ 
                message: 'Email ou mot de passe incorrect' 
            });
        }
    } catch (error) {
        console.error('Erreur login:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

app.get('/api/auth/verify', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        console.log(`üîê V√©rification token: ${token ? token.substring(0, 20) + '...' : 'aucun'}`);
        
        if (token && token.startsWith('token_')) {
            const userId = token.split('_')[1];
            const user = await User.findById(userId);
            
            if (user) {
                res.json({
                    valid: true,
                    user: {
                        _id: user._id,
                        name: user.name,
                        email: user.email,
                        role: user.role
                    }
                });
            } else {
                res.status(401).json({ valid: false });
            }
        } else {
            res.status(401).json({ valid: false });
        }
    } catch (error) {
        console.error('Erreur v√©rification token:', error);
        res.status(500).json({ valid: false });
    }
});

// === ROUTES SERVICES ===
// R√©cup√©rer tous les services
app.get('/api/services', async (req, res) => {
    try {
        const services = await Service.find({ active: true }).sort({ order: 1 });
        res.json(services);
    } catch (error) {
        console.error('Erreur r√©cup√©ration services:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// R√©cup√©rer tous les services (admin)
app.get('/api/admin/services', async (req, res) => {
    try {
        const services = await Service.find().sort({ order: 1 });
        res.json(services);
    } catch (error) {
        console.error('Erreur r√©cup√©ration services admin:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Cr√©er un nouveau service
app.post('/api/admin/services', async (req, res) => {
    try {
        const serviceData = req.body;
        const newService = new Service(serviceData);
        await newService.save();
        
        console.log('‚úÖ Nouveau service cr√©√©:', newService.name);
        res.json(newService);
    } catch (error) {
        console.error('Erreur cr√©ation service:', error);
        res.status(500).json({ error: 'Erreur cr√©ation service', details: error.message });
    }
});

// Modifier un service
app.put('/api/admin/services/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;
        
        const service = await Service.findByIdAndUpdate(id, updateData, { new: true });
        
        if (!service) {
            return res.status(404).json({ error: 'Service non trouv√©' });
        }
        
        console.log('‚úÖ Service modifi√©:', service.name);
        res.json(service);
    } catch (error) {
        console.error('Erreur modification service:', error);
        res.status(500).json({ error: 'Erreur modification service', details: error.message });
    }
});

// Supprimer un service
app.delete('/api/admin/services/:id', async (req, res) => {
    try {
        const { id } = req.params;
        
        const service = await Service.findByIdAndDelete(id);
        
        if (!service) {
            return res.status(404).json({ error: 'Service non trouv√©' });
        }
        
        console.log('‚úÖ Service supprim√©:', service.name);
        res.json({ message: 'Service supprim√© avec succ√®s' });
    } catch (error) {
        console.error('Erreur suppression service:', error);
        res.status(500).json({ error: 'Erreur suppression service', details: error.message });
    }
});

// === ROUTES GESTION CONTENU SITE ===

// Obtenir tout le contenu du site
app.get('/api/admin/site-content', async (req, res) => {
    try {
        const content = await SiteContent.find().sort({ section: 1, key: 1 });
        console.log('‚úÖ Contenu site r√©cup√©r√©:', content.length, '√©l√©ments');
        res.json(content);
    } catch (error) {
        console.error('Erreur r√©cup√©ration contenu:', error);
        res.status(500).json({ error: 'Erreur r√©cup√©ration contenu', details: error.message });
    }
});

// Obtenir le contenu d'une section sp√©cifique
app.get('/api/admin/site-content/:section', async (req, res) => {
    try {
        const { section } = req.params;
        const content = await SiteContent.find({ section }).sort({ key: 1 });
        console.log(`‚úÖ Contenu section '${section}' r√©cup√©r√©:`, content.length, '√©l√©ments');
        res.json(content);
    } catch (error) {
        console.error('Erreur r√©cup√©ration contenu section:', error);
        res.status(500).json({ error: 'Erreur r√©cup√©ration contenu section', details: error.message });
    }
});

// Cr√©er ou mettre √† jour du contenu
app.post('/api/admin/site-content', async (req, res) => {
    try {
        const { key, value, type = 'text', section, description } = req.body;
        
        if (!key || !value || !section) {
            return res.status(400).json({ error: 'Donn√©es manquantes (key, value, section requis)' });
        }
        
        // Utiliser upsert pour cr√©er ou mettre √† jour
        const content = await SiteContent.findOneAndUpdate(
            { key },
            { value, type, section, description },
            { new: true, upsert: true }
        );
        
        console.log('‚úÖ Contenu mis √† jour:', content.key);
        res.json(content);
    } catch (error) {
        console.error('Erreur mise √† jour contenu:', error);
        res.status(500).json({ error: 'Erreur mise √† jour contenu', details: error.message });
    }
});

// Mettre √† jour un contenu sp√©cifique
app.put('/api/admin/site-content/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { value, type, section, description } = req.body;
        
        const content = await SiteContent.findByIdAndUpdate(
            id,
            { value, type, section, description },
            { new: true }
        );
        
        if (!content) {
            return res.status(404).json({ error: 'Contenu non trouv√©' });
        }
        
        console.log('‚úÖ Contenu modifi√©:', content.key);
        res.json(content);
    } catch (error) {
        console.error('Erreur modification contenu:', error);
        res.status(500).json({ error: 'Erreur modification contenu', details: error.message });
    }
});

// Supprimer du contenu
app.delete('/api/admin/site-content/:id', async (req, res) => {
    try {
        const { id } = req.params;
        
        const content = await SiteContent.findByIdAndDelete(id);
        
        if (!content) {
            return res.status(404).json({ error: 'Contenu non trouv√©' });
        }
        
        console.log('‚úÖ Contenu supprim√©:', content.key);
        res.json({ message: 'Contenu supprim√© avec succ√®s' });
    } catch (error) {
        console.error('Erreur suppression contenu:', error);
        res.status(500).json({ error: 'Erreur suppression contenu', details: error.message });
    }
});

// Route publique pour obtenir le contenu du site (pour l'affichage frontend)
app.get('/api/site-content', async (req, res) => {
    try {
        const content = await SiteContent.find().sort({ section: 1, key: 1 });
        
        // Convertir en objet pour faciliter l'usage frontend
        const contentObj = {};
        content.forEach(item => {
            contentObj[item.key] = {
                value: item.value,
                type: item.type,
                section: item.section
            };
        });
        
        console.log('‚úÖ Contenu public r√©cup√©r√©:', Object.keys(contentObj).length, '√©l√©ments');
        res.json(contentObj);
    } catch (error) {
        console.error('Erreur r√©cup√©ration contenu public:', error);
        res.status(500).json({ error: 'Erreur r√©cup√©ration contenu public', details: error.message });
    }
});

// Initialiser les services par d√©faut si la collection est vide
async function initializeDefaultServices() {
    try {
        const count = await Service.countDocuments();
        if (count === 0) {
            console.log('üîß Initialisation des services par d√©faut...');
            
            const defaultServices = [
                {
                    key: 'led_therapie',
                    name: 'üí° LED Th√©rapie',
                    description: 'Phototh√©rapie par lumi√®re LED - Anti-√¢ge et purifiant',
                    price: 40,
                    duration: 30,
                    preparationTime: 15,
                    emoji: 'üí°',
                    label: 'Soin LED Th√©rapie',
                    order: 1
                },
                {
                    key: 'hydro_cleaning',
                    name: 'üíß Hydro\'Cleaning',
                    description: 'Hydrafacial nouvelle g√©n√©ration - Nettoyage et hydratation profonde',
                    price: 90,
                    duration: 60,
                    preparationTime: 15,
                    emoji: 'üíß',
                    label: 'Soin Hydro\'Cleaning',
                    order: 2
                },
                {
                    key: 'microneedling',
                    name: 'üîÑ Renaissance',
                    description: 'Microneedling - R√©g√©n√©ration cellulaire et stimulation du collag√®ne',
                    price: 70,
                    duration: 75,
                    preparationTime: 15,
                    emoji: 'üîÑ',
                    label: 'Soin Renaissance',
                    order: 3
                },
                {
                    key: 'bb_glow',
                    name: '‚ú® BB Glow',
                    description: 'Teint parfait semi-permanent - Effet peau de porcelaine',
                    price: 100,
                    duration: 90,
                    preparationTime: 15,
                    emoji: '‚ú®',
                    label: 'Soin BB Glow',
                    order: 4
                },
                {
                    key: 'hydro_naissance',
                    name: 'üåü Hydro\'Naissance',
                    description: 'Protocole exclusif : Hydro\'Cleaning + Renaissance + LED en 90 minutes',
                    price: 120,
                    duration: 90,
                    preparationTime: 15,
                    emoji: 'üåü',
                    label: 'Soin Hydro\'Naissance',
                    order: 5
                }
            ];
            
            await Service.insertMany(defaultServices);
            console.log('‚úÖ Services par d√©faut initialis√©s');
        }
    } catch (error) {
        console.error('‚ùå Erreur initialisation services:', error);
    }
}

// Initialiser le contenu du site par d√©faut
async function initializeDefaultSiteContent() {
    try {
        const count = await SiteContent.countDocuments();
        if (count === 0) {
            console.log('üîß Initialisation du contenu du site par d√©faut...');
            
            const defaultContent = [
                {
                    key: 'hero_title',
                    value: 'Une peau respect√©e, une beaut√© r√©v√©l√©e',
                    type: 'text',
                    section: 'hero',
                    description: 'Titre principal de la page d\'accueil'
                },
                {
                    key: 'hero_subtitle',
                    value: 'Institut de beaut√© de soins avanc√©s',
                    type: 'text',
                    section: 'hero',
                    description: 'Sous-titre de la page d\'accueil'
                },
                {
                    key: 'hero_cta',
                    value: 'D√©couvrir nos soins',
                    type: 'text',
                    section: 'hero',
                    description: 'Texte du bouton d\'action principal'
                },
                {
                    key: 'services_title',
                    value: 'Mes Prestations',
                    type: 'text',
                    section: 'services',
                    description: 'Titre de la section services'
                },
                {
                    key: 'contact_title',
                    value: 'Contact & Rendez-vous',
                    type: 'text',
                    section: 'contact',
                    description: 'Titre de la section contact'
                },
                {
                    key: 'about_title',
                    value: '√Ä propos de moi',
                    type: 'text',
                    section: 'about',
                    description: 'Titre de la section √† propos'
                },
                {
                    key: 'site_name',
                    value: 'LAIA SKIN INSTITUT',
                    type: 'text',
                    section: 'general',
                    description: 'Nom du site/institut'
                },
                {
                    key: 'footer_text',
                    value: '¬© 2025 LAIA SKIN INSTITUT - Tous droits r√©serv√©s',
                    type: 'text',
                    section: 'footer',
                    description: 'Texte du pied de page'
                }
            ];
            
            await SiteContent.insertMany(defaultContent);
            console.log('‚úÖ Contenu du site par d√©faut initialis√©');
        }
    } catch (error) {
        console.error('‚ùå Erreur initialisation contenu site:', error);
    }
}

// === ROUTES CLIENT ===
app.get('/api/clients/appointments', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        const userId = token ? token.split('_')[1] : null;
        
        console.log(`üìÖ R√©cup√©ration RDV pour user ${userId}`);
        
        const userAppointments = await Appointment.find({ client: userId }).sort({ datetime: 1 });
        const now = new Date();
        
        const upcoming = userAppointments.filter(apt => new Date(apt.datetime) > now);
        const past = userAppointments.filter(apt => new Date(apt.datetime) <= now);
        
        res.json({ upcoming, past });
    } catch (error) {
        console.error('Erreur r√©cup√©ration RDV client:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

app.get('/api/clients/stats', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        const userId = token ? token.split('_')[1] : null;
        
        const userAppointments = await Appointment.find({ client: userId });
        
        res.json({
            totalAppointments: userAppointments.length,
            totalSpent: userAppointments.reduce((total, apt) => total + apt.pricing.totalPaid, 0),
            nextAppointment: userAppointments.find(apt => new Date(apt.datetime) > new Date()),
            favoriteServices: []
        });
    } catch (error) {
        console.error('Erreur r√©cup√©ration stats client:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Cache pour optimiser les performances
let cachedOccupiedSlots = null;
let cacheExpiry = null;
const CACHE_DURATION = 30000; // 30 secondes

// === ROUTES APPOINTMENTS ===
app.get('/api/appointments/occupied-slots', async (req, res) => {
    try {
        // V√©rifier le cache
        const now = Date.now();
        if (cachedOccupiedSlots && cacheExpiry && now < cacheExpiry) {
            console.log('‚ö° Cache cr√©neaux occup√©s utilis√©');
            return res.json(cachedOccupiedSlots);
        }
        
        console.log('üîç R√©cup√©ration cr√©neaux occup√©s depuis MongoDB Atlas');
        
        const appointments = await Appointment.find({ 
            status: { $in: ['confirm√©', 'en_attente'] },
            datetime: { $gte: new Date() }
        });
        
        const occupiedSlots = appointments.map(apt => ({
            datetime: apt.datetime,
            duration: apt.duration,
            status: apt.status,
            service: {
                name: 'Cr√©neau occup√©',
                category: apt.service.category
            },
            endTime: new Date(apt.datetime.getTime() + (apt.duration + 15) * 60000)
        }));
        
        console.log(`‚úÖ ${occupiedSlots.length} cr√©neaux occup√©s trouv√©s depuis MongoDB`);
        
        const responseData = {
            occupiedSlots,
            total: occupiedSlots.length
        };
        
        // Mettre √† jour le cache
        cachedOccupiedSlots = responseData;
        cacheExpiry = Date.now() + CACHE_DURATION;
        
        res.json(responseData);
    } catch (error) {
        console.error('Erreur r√©cup√©ration cr√©neaux occup√©s:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour v√©rifier la d√©tection de conflits
app.post('/api/appointments/check-conflict', async (req, res) => {
    try {
        const { datetime, duration } = req.body;
        const proposedStart = new Date(datetime);
        const proposedEnd = new Date(proposedStart.getTime() + (duration + 15) * 60000);
        
        const conflicts = await Appointment.find({
            status: { $in: ['confirm√©', 'en_attente'] },
            $or: [
                // RDV qui commence pendant le cr√©neau propos√©
                {
                    datetime: { $gte: proposedStart, $lt: proposedEnd }
                },
                // RDV qui se termine pendant le cr√©neau propos√©
                {
                    $expr: {
                        $and: [
                            { $lte: ['$datetime', proposedStart] },
                            { $gte: [{ $add: ['$datetime', { $multiply: [{ $add: ['$duration', 15] }, 60000] }] }, proposedStart] }
                        ]
                    }
                }
            ]
        });
        
        res.json({
            hasConflict: conflicts.length > 0,
            conflicts: conflicts,
            message: conflicts.length > 0 ? 'Cr√©neau non disponible' : 'Cr√©neau disponible'
        });
    } catch (error) {
        console.error('Erreur v√©rification conflit:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// === ROUTES CASH BOOKING ===

// Route pour cr√©er une r√©servation sans paiement en ligne
app.post('/api/create-cash-booking', async (req, res) => {
    try {
        const booking = req.body;
        
        console.log('üí∞ Cr√©ation r√©servation esp√®ces pour:', booking.email);
        
        // Create or find user account - Recherche par email pour √©viter les doublons
        let user = await User.findOne({ email: booking.email.toLowerCase() });
        let isNewAccount = false;
        
        if (!user) {
            // Create new user account
            user = new User({
                name: `${booking.firstName} ${booking.lastName}`,
                email: booking.email.toLowerCase(),
                phone: booking.phone,
                password: booking.password,
                role: 'client'
            });
            await user.save();
            isNewAccount = true;
            console.log(`‚úÖ Nouveau compte client cr√©√©: ${user.name} (${user.email})`);
        } else {
            console.log(`üë§ Client existant trouv√©: ${user.name} (${user.email})`);
            
            // Mettre √† jour les informations du client si n√©cessaire
            let updated = false;
            
            // Mettre √† jour le nom si diff√©rent
            const newName = `${booking.firstName} ${booking.lastName}`;
            if (user.name !== newName) {
                user.name = newName;
                updated = true;
                console.log(`üìù Nom mis √† jour: ${newName}`);
            }
            
            // Mettre √† jour le t√©l√©phone si diff√©rent
            if (user.phone !== booking.phone) {
                user.phone = booking.phone;
                updated = true;
                console.log(`üìû T√©l√©phone mis √† jour: ${booking.phone}`);
            }
            
            // Mettre √† jour le mot de passe
            if (booking.password) {
                const hashedPassword = await bcrypt.hash(booking.password, 10);
                user.password = hashedPassword;
                updated = true;
                console.log(`üîÑ Mot de passe mis √† jour pour: ${user.email}`);
            }
            
            if (updated) {
                await user.save();
                console.log(`üíæ Informations client mises √† jour`);
            }
        }
        
        // Marquer comme utilisateur existant pour le message personnalis√©
        const existingUser = !isNewAccount;
        
        // Create appointment - Conversion date fran√ßaise vers ISO
        console.log('üêû DEBUG - Date re√ßue:', booking.date, 'Heure:', booking.time);
        
        // Convertir date fran√ßaise (DD/MM/YYYY) vers Date JavaScript
        const dateParts = booking.date.split('/'); // ["12", "08", "2025"]
        
        // G√©rer le format d'heure "14h00" ou "14:00"
        let timeParts;
        if (booking.time.includes('h')) {
            timeParts = booking.time.split('h'); // "14h00" -> ["14", "00"]
        } else {
            timeParts = booking.time.split(':'); // "14:00" -> ["14", "00"]
        }
        
        const appointmentDate = new Date(
            parseInt(dateParts[2]), // ann√©e
            parseInt(dateParts[1]) - 1, // mois (0-index√©)
            parseInt(dateParts[0]), // jour
            parseInt(timeParts[0]), // heures
            parseInt(timeParts[1] || '0') // minutes (d√©faut 0 si pas sp√©cifi√©)
        );
        
        console.log('üêû DEBUG - Date convertie:', appointmentDate);
        
        // ‚ö†Ô∏è V√âRIFICATION DE CONFLIT DE CR√âNEAU
        const existingAppointment = await Appointment.findOne({
            datetime: appointmentDate,
            status: { $ne: 'annul√©' } // Exclure les rendez-vous annul√©s
        });
        
        if (existingAppointment) {
            console.log(`‚ùå Conflit d√©tect√© - Cr√©neau d√©j√† occup√©: ${appointmentDate}`);
            return res.status(409).json({ 
                error: 'Cr√©neau d√©j√† occup√©',
                message: 'Ce cr√©neau horaire est d√©j√† r√©serv√©. Veuillez choisir une autre date/heure.',
                conflictDateTime: appointmentDate,
                existingBooking: {
                    id: existingAppointment._id,
                    service: existingAppointment.service.name
                }
            });
        }
        
        console.log('‚úÖ Cr√©neau disponible - Cr√©ation du rendez-vous');
        
        // Configuration des services
        const serviceConfigs = {
            hydro_naissance: { name: "Hydro'Naissance", price: 120, duration: 90, category: 'hydronaissance' },
            bb_glow: { name: "BB Glow", price: 100, duration: 90, category: 'bb_glow' },
            hydro_cleaning: { name: "Hydro'Cleaning", price: 90, duration: 90, category: 'hydro_cleaning' },
            microneedling: { name: "Renaissance", price: 70, duration: 75, category: 'microneedling' },
            led_therapie: { name: "LED Th√©rapie", price: 40, duration: 30, category: 'led_therapie' }
        };

        // D√©terminer le service (depuis le formulaire ou par d√©faut Hydro'Naissance)
        const serviceType = booking.serviceType || 'hydro_naissance';
        const serviceConfig = serviceConfigs[serviceType] || serviceConfigs.hydro_naissance;

        const appointment = new Appointment({
            client: user._id,
            datetime: appointmentDate,
            duration: serviceConfig.duration,
            status: 'confirm√©', // Confirm√© directement (pas d'acompte)
            service: {
                name: serviceConfig.name,
                category: serviceConfig.category,
                duration: serviceConfig.duration
            },
            paymentStatus: 'non_pay√©',
            pricing: {
                servicePrice: serviceConfig.price,
                deposit: 0, // Pas d'acompte
                totalPaid: 0
            },
            notes: {
                client: booking.notes || '',
                admin: 'Paiement int√©gral en esp√®ces le jour J'
            }
        });
        
        await appointment.save();
        console.log(`üìÖ RDV cr√©√©: ${appointment._id}`);
        
        // Vider le cache des cr√©neaux occup√©s car un nouveau RDV a √©t√© ajout√©
        cachedOccupiedSlots = null;
        cacheExpiry = null;
        console.log('üîÑ Cache cr√©neaux occup√©s vid√©');
        
        // Message personnalis√© selon le type de compte
        let responseMessage = 'R√©servation cr√©√©e avec succ√®s';
        if (existingUser && booking.password) {
            responseMessage += '. Votre mot de passe a √©t√© mis √† jour pour faciliter l\'acc√®s √† votre espace client.';
        }

        // R√©ponse imm√©diate au client pour la rapidit√©
        res.json({ 
            success: true,
            bookingId: appointment._id,
            message: responseMessage
        });
        
        // PUIS traitement en arri√®re-plan pour ne pas bloquer l'utilisateur
        process.nextTick(async () => {
            try {
                console.log('üìß Envoi email en arri√®re-plan...');
                await sendConfirmationEmail(booking, appointment, isNewAccount);
                console.log('‚úÖ Email de confirmation envoy√©');
                
                // Programmer le rappel automatique
                scheduleReminder(appointment, user);
                console.log('‚è∞ Rappel programm√©');
                
            } catch (error) {
                console.error('‚ùå Erreur envoi messages (non bloquant):', error);
            }
        });
        
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation r√©servation:', error);
        res.status(500).json({ 
            error: 'Erreur lors de la cr√©ation de la r√©servation',
            details: error.message 
        });
    }
});

// Route temporaire pour cr√©er des comptes de test
app.get('/create-test-accounts', async (req, res) => {
    try {
        // Cr√©er des comptes de test simples
        const testAccounts = [
            {
                name: 'Marie Dupont',
                email: 'marie@test.com',
                password: 'test123',
                phone: '01 23 45 67 89',
                role: 'client'
            },
            {
                name: 'Sophie Martin', 
                email: 'sophie@test.com',
                password: 'test123',
                phone: '01 98 76 54 32',
                role: 'client'
            },
            {
                name: 'C√©lia IVORRA',
                email: 'celia.ivorra95@hotmail.fr',
                password: 'laia123',
                phone: '06 12 34 56 78',
                role: 'client'
            }
        ];
        
        // Supprimer les anciens comptes s'ils existent
        await User.deleteMany({ email: { $in: testAccounts.map(acc => acc.email) } });
        
        // Cr√©er les nouveaux comptes
        await User.insertMany(testAccounts);
        
        console.log('‚úÖ Comptes de test cr√©√©s');
        
        res.json({
            success: true,
            message: 'Comptes de test cr√©√©s avec succ√®s',
            accounts: testAccounts.map(acc => ({
                email: acc.email,
                password: acc.password,
                name: acc.name
            }))
        });
        
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation comptes test:', error);
        res.status(500).json({ error: 'Erreur cr√©ation comptes' });
    }
});

// Route pour confirmer ou annuler un rendez-vous
app.get('/confirm-appointment', async (req, res) => {
    try {
        const { id, action } = req.query;
        
        const appointment = await Appointment.findById(id).populate('client');
        if (!appointment) {
            return res.status(404).send(`
                <html>
                <head><title>Erreur - LAIA SKIN INSTITUT</title></head>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>‚ùå Rendez-vous non trouv√©</h1>
                    <p>Ce lien n'est plus valide.</p>
                </body>
                </html>
            `);
        }
        
        if (action === 'confirm') {
            appointment.notes.admin += ' - Confirm√© par email';
            await appointment.save();
            
            console.log(`‚úÖ RDV confirm√© par ${appointment.client.name}`);
            
            res.send(`
                <html>
                <head>
                    <title>Confirmation - LAIA SKIN INSTITUT</title>
                    <style>
                        body { font-family: 'Lora', serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #fdfbf7, #f8f6f0); }
                        .container { max-width: 500px; margin: 0 auto; background: white; padding: 2rem; border-radius: 20px; box-shadow: 0 20px 60px rgba(0,0,0,0.1); }
                        .success { color: #28a745; font-size: 3rem; margin-bottom: 1rem; }
                        h1 { color: #c9a084; margin-bottom: 1rem; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="success">‚úÖ</div>
                        <h1>üå∏ LAIA SKIN INSTITUT üå∏</h1>
                        <h2>Rendez-vous confirm√© !</h2>
                        <p>Merci ${appointment.client.name} !</p>
                        <p>Nous vous attendons demain √† ${appointment.datetime.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}.</p>
                        <p><strong>üí∞ N'oubliez pas :</strong> 120‚Ç¨ en esp√®ces</p>
                        <p style="margin-top: 2rem; color: #666;">
                            √Ä tr√®s bient√¥t,<br>
                            L'√©quipe LAIA SKIN INSTITUT
                        </p>
                    </div>
                </body>
                </html>
            `);
            
        } else if (action === 'reschedule') {
            appointment.status = '√† reporter';
            appointment.notes.admin += ' - Demande de report par email';
            await appointment.save();
            
            console.log(`üìÖ RDV √† reporter demand√© par ${appointment.client.name}`);
            
            res.send(`
                <html>
                <head>
                    <title>Report de rendez-vous - LAIA SKIN INSTITUT</title>
                    <style>
                        body { font-family: 'Lora', serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #fdfbf7, #f8f6f0); }
                        .container { max-width: 500px; margin: 0 auto; background: white; padding: 2rem; border-radius: 20px; box-shadow: 0 20px 60px rgba(0,0,0,0.1); }
                        .reschedule { color: #fd7e14; font-size: 3rem; margin-bottom: 1rem; }
                        h1 { color: #c9a084; margin-bottom: 1rem; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="reschedule">üìÖ</div>
                        <h1>üå∏ LAIA SKIN INSTITUT üå∏</h1>
                        <h2>Demande de report enregistr√©e</h2>
                        <p>Merci ${appointment.client.name} !</p>
                        <p>Nous avons bien not√© votre demande de report de rendez-vous.</p>
                        <p><strong>‚ú® Notre √©quipe vous recontacte dans les plus brefs d√©lais</strong> pour vous proposer de nouveaux cr√©neaux disponibles.</p>
                        <p style="margin-top: 2rem; color: #666;">
                            Merci de votre confiance,<br>
                            L'√©quipe LAIA SKIN INSTITUT
                        </p>
                    </div>
                </body>
                </html>
            `);
            
        } else if (action === 'cancel') {
            appointment.status = 'annul√©';
            appointment.notes.admin += ' - Annul√© par email 24h avant';
            await appointment.save();
            
            console.log(`‚ùå RDV annul√© par ${appointment.client.name}`);
            
            res.send(`
                <html>
                <head>
                    <title>Annulation - LAIA SKIN INSTITUT</title>
                    <style>
                        body { font-family: 'Lora', serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #fdfbf7, #f8f6f0); }
                        .container { max-width: 500px; margin: 0 auto; background: white; padding: 2rem; border-radius: 20px; box-shadow: 0 20px 60px rgba(0,0,0,0.1); }
                        .cancel { color: #dc3545; font-size: 3rem; margin-bottom: 1rem; }
                        h1 { color: #c9a084; margin-bottom: 1rem; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="cancel">‚ùå</div>
                        <h1>üå∏ LAIA SKIN INSTITUT üå∏</h1>
                        <h2>Rendez-vous annul√©</h2>
                        <p>Merci ${appointment.client.name} de nous avoir pr√©venus.</p>
                        <p>Votre cr√©neau est maintenant disponible pour d'autres clients.</p>
                        <p>N'h√©sitez pas √† reprendre rendez-vous quand vous le souhaitez !</p>
                        <p style="margin-top: 2rem; color: #666;">
                            L'√©quipe LAIA SKIN INSTITUT
                        </p>
                    </div>
                </body>
                </html>
            `);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur confirmation RDV:', error);
        res.status(500).send(`
            <html>
            <head><title>Erreur - LAIA SKIN INSTITUT</title></head>
            <body style="font-family: Arial; text-align: center; padding: 50px;">
                <h1>‚ùå Erreur</h1>
                <p>Une erreur s'est produite. Contactez-nous directement.</p>
            </body>
            </html>
        `);
    }
});

// Route pour confirmer le paiement (webhook ou success)
app.post('/api/confirm-payment', async (req, res) => {
    try {
        const { session_id, appointment_id } = req.body;
        
        console.log('‚úÖ Confirmation paiement pour session:', session_id);
        
        // Retrieve Stripe session
        const session = await stripe.checkout.sessions.retrieve(session_id);
        
        if (session.payment_status === 'paid') {
            // Update appointment
            const appointment = await Appointment.findById(appointment_id);
            if (appointment) {
                appointment.status = 'confirm√©';
                appointment.paymentStatus = 'acompte_pay√©';
                appointment.pricing.totalPaid = 60; // 60‚Ç¨ d'acompte
                await appointment.save();
                
                console.log(`‚úÖ RDV confirm√© et pay√©: ${appointment_id}`);
                
                res.json({ 
                    success: true, 
                    message: 'Paiement confirm√©, rendez-vous valid√©' 
                });
            } else {
                res.status(404).json({ error: 'Rendez-vous non trouv√©' });
            }
        } else {
            res.status(400).json({ error: 'Paiement non confirm√©' });
        }
        
    } catch (error) {
        console.error('‚ùå Erreur confirmation paiement:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// === WEBHOOK WHATSAPP ===

// Webhook pour recevoir les r√©ponses WhatsApp
app.post('/webhook/whatsapp', async (req, res) => {
    try {
        const body = req.body;
        
        if (body.object === 'whatsapp_business_account') {
            body.entry?.forEach(entry => {
                entry.changes?.forEach(change => {
                    if (change.field === 'messages') {
                        const messages = change.value.messages;
                        
                        messages?.forEach(async message => {
                            if (message.type === 'text') {
                                const from = message.from;
                                const text = message.text.body.toLowerCase();
                                
                                console.log(`üì± WhatsApp re√ßu de ${from}: ${text}`);
                                
                                // Traiter la r√©ponse de confirmation
                                if (text.includes('oui') || text.includes('ok') || text.includes('‚úÖ') || text.includes('confirme')) {
                                    await handleWhatsAppConfirmation(from, 'confirm');
                                } else if (text.includes('report') || text.includes('d√©cal') || text.includes('chang') || text.includes('üìÖ')) {
                                    await handleWhatsAppConfirmation(from, 'reschedule');
                                } else if (text.includes('non') || text.includes('annule') || text.includes('‚ùå') || text.includes('cancel')) {
                                    await handleWhatsAppConfirmation(from, 'cancel');
                                }
                            }
                        });
                    }
                });
            });
        }
        
        res.status(200).send('OK');
        
    } catch (error) {
        console.error('‚ùå Erreur webhook WhatsApp:', error);
        res.status(500).send('Erreur');
    }
});

// V√©rification du webhook WhatsApp (requis par Meta)
app.get('/webhook/whatsapp', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    const VERIFY_TOKEN = process.env.WHATSAPP_VERIFY_TOKEN || 'laia_skin_webhook_2025';
    
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
        console.log('‚úÖ Webhook WhatsApp v√©rifi√©');
        res.status(200).send(challenge);
    } else {
        console.log('‚ùå √âchec v√©rification webhook WhatsApp');
        res.status(403).send('Forbidden');
    }
});

// Fonction pour traiter les confirmations WhatsApp
async function handleWhatsAppConfirmation(phone, action) {
    try {
        // Trouver le rendez-vous par num√©ro de t√©l√©phone
        const cleanPhone = phone.replace(/\D/g, '');
        const user = await User.findOne({ 
            phone: { $regex: cleanPhone, $options: 'i' } 
        });
        
        if (!user) {
            console.log(`‚ùå Utilisateur non trouv√© pour le t√©l√©phone ${phone}`);
            return;
        }
        
        // Trouver le prochain RDV de cet utilisateur
        const appointment = await Appointment.findOne({
            client: user._id,
            status: 'confirm√©',
            datetime: { $gte: new Date() }
        }).sort({ datetime: 1 });
        
        if (!appointment) {
            console.log(`‚ùå RDV non trouv√© pour ${user.name}`);
            return;
        }
        
        if (action === 'confirm') {
            appointment.notes.admin += ' - Confirm√© par WhatsApp';
            await appointment.save();
            
            const serviceEmojis = {
                hydronaissance: 'üåü',
                bb_glow: '‚ú®', 
                hydro_cleaning: 'üíß',
                microneedling: 'üîÑ',
                led_therapie: 'üí°'
            };
            
            const serviceEmoji = serviceEmojis[appointment.service.category] || 'üåü';
            
            await sendWhatsAppText(phone, 
                `‚úÖ Parfait ${user.name} ! Votre RDV est bien confirm√©.\n\n${serviceEmoji} ${appointment.service.name}\nüìÖ ${appointment.datetime.toLocaleDateString('fr-FR')}\nüïê ${appointment.datetime.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}\nüí∞ ${appointment.pricing.servicePrice}‚Ç¨ en esp√®ces\n\n√Ä tr√®s bient√¥t ! üå∏`
            );
            
            // Enregistrer la notification pour l'admin
            await saveAdminNotification(appointment._id, 'confirm', user.name);
            
            console.log(`‚úÖ RDV confirm√© par WhatsApp: ${user.name}`);
            
        } else if (action === 'reschedule') {
            appointment.status = '√† reporter';
            appointment.notes.admin += ' - Demande de report par WhatsApp';
            await appointment.save();
            
            await sendWhatsAppText(phone, 
                `üìÖ ${user.name}, nous avons not√© votre demande de report.\n\n‚ú® LAIA SKIN vous recontacte dans les plus brefs d√©lais pour vous proposer de nouveaux cr√©neaux.\n\nMerci de votre confiance ! üå∏`
            );
            
            // Enregistrer la notification pour l'admin
            await saveAdminNotification(appointment._id, 'reschedule', user.name);
            
            console.log(`üìÖ RDV √† reporter demand√© par WhatsApp: ${user.name}`);
            
        } else if (action === 'cancel') {
            appointment.status = 'annul√©';
            appointment.notes.admin += ' - Annul√© par WhatsApp - Cr√©neau lib√©r√© automatiquement';
            await appointment.save();
            
            await sendWhatsAppText(phone, 
                `üìÖ RDV annul√©, merci de nous avoir pr√©venus ${user.name}.\n\nVotre cr√©neau est maintenant libre pour d'autres clients.\n\nN'h√©sitez pas √† reprendre RDV quand vous le souhaitez ! üå∏`
            );
            
            // Enregistrer la notification pour l'admin
            await saveAdminNotification(appointment._id, 'cancel', user.name);
            
            console.log(`‚ùå RDV annul√© par WhatsApp: ${user.name} - Cr√©neau automatiquement lib√©r√©`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur traitement confirmation WhatsApp:', error);
    }
}

// Route pour tester WhatsApp (d√©veloppement)
app.post('/test-whatsapp', async (req, res) => {
    try {
        const { phone, message } = req.body;
        
        const result = await sendWhatsAppText(phone, message);
        
        res.json({
            success: result.success,
            message: result.success ? 'Message WhatsApp envoy√©' : 'Erreur envoi',
            details: result
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Erreur serveur',
            error: error.message
        });
    }
});

// Fonction pour enregistrer une notification admin
async function saveAdminNotification(appointmentId, action, clientName) {
    try {
        const notification = new AdminNotification({
            appointmentId,
            action,
            clientName,
            timestamp: new Date()
        });
        
        await notification.save();
        console.log(`üì¢ Notification admin enregistr√©e: ${action} - ${clientName}`);
        
    } catch (error) {
        console.error('‚ùå Erreur sauvegarde notification admin:', error);
    }
}

// Route pour r√©cup√©rer les mises √† jour r√©centes pour l'admin
app.get('/api/admin/recent-updates', async (req, res) => {
    try {
        // R√©cup√©rer les notifications non lues des 10 derni√®res minutes
        const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
        
        const recentNotifications = await AdminNotification.find({
            timestamp: { $gte: tenMinutesAgo },
            read: false
        }).sort({ timestamp: -1 });
        
        // Marquer comme lues
        if (recentNotifications.length > 0) {
            await AdminNotification.updateMany(
                { _id: { $in: recentNotifications.map(n => n._id) } },
                { read: true }
            );
        }
        
        const confirmations = recentNotifications.map(notif => ({
            appointmentId: notif.appointmentId,
            action: notif.action,
            clientName: notif.clientName,
            timestamp: notif.timestamp
        }));
        
        res.json({ confirmations });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration mises √† jour:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// === ENDPOINT TEMPORAIRE CR√âATION UTILISATEUR TEST ===
app.post('/api/auth/create-test-user', async (req, res) => {
    try {
        // Cr√©er un utilisateur test avec les RDV existants
        const existingUser = await User.findOne({ email: 'celia.ivorra95@hotmail.fr' });
        
        if (existingUser) {
            // Mettre √† jour le mot de passe
            existingUser.password = 'test123';
            await existingUser.save();
            res.json({ message: 'Mot de passe mis √† jour', user: existingUser });
        } else {
            res.json({ message: 'Utilisateur non trouv√©' });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// === ENDPOINT TEST HISTORIQUE ===
app.post('/api/test/create-history', async (req, res) => {
    try {
        const user = await User.findOne({ email: 'celia.ivorra95@hotmail.fr' });
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        
        // Cr√©er quelques soins termin√©s pour l'historique
        const pastTreatments = [
            {
                client: user._id,
                datetime: new Date('2024-12-15T14:00:00.000Z'),
                duration: 90,
                status: 'termin√©',
                service: { name: 'Hydro\'Naissance', category: 'hydronaissance', duration: 90 },
                pricing: { servicePrice: 120, deposit: 0, totalPaid: 120 },
                notes: { client: '', admin: 'Excellent r√©sultat, peau √©clatante' },
                paymentStatus: 'pay√©'
            },
            {
                client: user._id,
                datetime: new Date('2024-11-20T10:00:00.000Z'),
                duration: 60,
                status: 'termin√©',
                service: { name: 'Nettoyage de Peau', category: 'nettoyage', duration: 60 },
                pricing: { servicePrice: 80, deposit: 0, totalPaid: 80 },
                notes: { client: '', admin: 'Peau purifi√©e, tr√®s satisfaite' },
                paymentStatus: 'pay√©'
            }
        ];
        
        await Appointment.insertMany(pastTreatments);
        res.json({ message: 'Historique de test cr√©√©', count: pastTreatments.length });
        
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// === API RENDEZ-VOUS CLIENT ===
app.get('/api/client/appointments', async (req, res) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token manquant' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const appointments = await Appointment.find({ client: decoded.userId })
            .sort({ datetime: -1 });
        
        res.json(appointments);
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration rendez-vous client:', error);
        res.status(401).json({ error: 'Token invalide' });
    }
});

// === API HISTORIQUE DES SOINS CLIENT ===
app.get('/api/client/history', async (req, res) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token manquant' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        
        // R√©cup√©rer uniquement les RDV termin√©s pour l'historique
        const history = await Appointment.find({ 
            client: decoded.userId,
            status: 'termin√©'
        }).sort({ datetime: -1 });
        
        res.json(history);
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration historique client:', error);
        res.status(401).json({ error: 'Token invalide' });
    }
});

// === API R√âCUP√âRATION D√âTAILS R√âSERVATION ===
app.get('/api/bookings/:id', async (req, res) => {
    try {
        const bookingId = req.params.id;
        const booking = await Appointment.findById(bookingId);
        
        if (!booking) {
            return res.status(404).json({ error: 'R√©servation introuvable' });
        }
        
        res.json({
            id: booking._id,
            datetime: booking.datetime,
            service: booking.service,
            duration: booking.duration,
            price: booking.pricing?.servicePrice,
            status: booking.status
        });
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration r√©servation:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// === PAGES STATIQUES ===
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'mon-institut.html'));
});

// Route pour la connexion client
app.get('/client-login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'client-login.html'));
});

// Route pour l'espace client - URL explicite
app.get('/espace-client.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// Route pour l'espace client (ancienne URL)
app.get('/client-dashboard.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'client-dashboard.html'));
});

// Route pour l'admin dashboard  
app.get('/admin-dashboard.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin-dashboard.html'));
});


// === D√âMARRAGE SERVEUR ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
    console.log(`üöÄ LAIA SKIN INSTITUT - Serveur principal d√©marr√© sur http://localhost:${PORT}`);
    console.log('üíæ Base de donn√©es: MongoDB Atlas');
    
    // Initialiser les services par d√©faut
    await initializeDefaultServices();
    
    // Initialiser le contenu du site par d√©faut
    await initializeDefaultSiteContent();
    
    console.log('\nüîê IDENTIFIANTS DE CONNEXION:');
    console.log('üë§ Admin: admin@laiaskin.com / admin123');
    console.log('üë• Clients: marie.dupont@email.com / client123');
    console.log('           sophie.martin@email.com / client123');
    console.log('\nüìÖ RDV de test disponible:');
    console.log('   ‚Ä¢ Marie: 15 ao√ªt 2024 √† 14h00 - BB Glow (90min)');
    console.log('\nüíª Pour acc√©der:');
    console.log(`   üìç Site principal: http://localhost:${PORT}`);
    console.log(`   üîë Espace client: http://localhost:${PORT}/espace-client.html`);
    console.log('\n‚ú® Site int√©gr√© avec MongoDB Atlas - Production ready!');
});

// === ROUTES ADMIN DASHBOARD ===

// Route pour les stats du dashboard
app.get('/api/admin/dashboard', async (req, res) => {
    try {
        const totalClients = await User.countDocuments({ role: 'client' });
        const appointmentsToday = await Appointment.countDocuments({
            datetime: {
                $gte: new Date(new Date().setHours(0,0,0,0)),
                $lte: new Date(new Date().setHours(23,59,59,999))
            }
        });
        
        res.json({
            stats: {
                totalClients,
                appointmentsToday,
                newClientsThisMonth: 0,
                appointmentsThisWeek: 0,
                totalAppointments: await Appointment.countDocuments(),
                monthlyRevenue: 0
            },
            todayAppointments: []
        });
    } catch (error) {
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Alias pour /api/admin/stats (m√™me donn√©es que dashboard)
app.get('/api/admin/stats', async (req, res) => {
    try {
        const totalClients = await User.countDocuments({ role: 'client' });
        const appointmentsToday = await Appointment.countDocuments({
            datetime: {
                $gte: new Date(new Date().setHours(0,0,0,0)),
                $lte: new Date(new Date().setHours(23,59,59,999))
            }
        });
        
        res.json({
            totalClients,
            appointmentsToday,
            newClientsThisMonth: 0,
            appointmentsThisWeek: 0,
            totalAppointments: await Appointment.countDocuments(),
            monthlyRevenue: 0
        });
    } catch (error) {
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour les rendez-vous admin
app.get('/api/admin/appointments', async (req, res) => {
    try {
        const appointments = await Appointment.find()
            .populate('client', 'name email phone')
            .sort({ datetime: -1 });
        
        res.json({ appointments });
    } catch (error) {
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour les clients admin
app.get('/api/admin/clients', async (req, res) => {
    try {
        const clients = await User.find({ role: 'client' });
        res.json({ clients });
    } catch (error) {
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// === ROUTES LOYALTY ===

// Route pour mettre √† jour le statut d'un rendez-vous et g√©rer la fid√©lit√©
app.put('/api/appointments/:id/status', async (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;
        
        const appointment = await Appointment.findById(id).populate('client');
        if (!appointment) {
            return res.status(404).json({ message: 'Rendez-vous non trouv√©' });
        }
        
        const oldStatus = appointment.status;
        appointment.status = status;
        await appointment.save();
        
        // Si le statut passe √† "termin√©", mettre √† jour la fid√©lit√©
        if (status === 'termin√©' && oldStatus !== 'termin√©') {
            await updateClientLoyalty(appointment);
        }
        
        res.json({ 
            message: 'Statut mis √† jour',
            appointment: appointment
        });
        
    } catch (error) {
        console.error('Erreur mise √† jour statut:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Fonction pour mettre √† jour la fid√©lit√© d'un client
async function updateClientLoyalty(appointment) {
    try {
        const clientId = appointment.client._id || appointment.client;
        
        // Trouver ou cr√©er l'enregistrement de fid√©lit√©
        let loyalty = await Loyalty.findOne({ client: clientId });
        if (!loyalty) {
            loyalty = new Loyalty({ client: clientId });
        }
        
        // D√©terminer le type de service (soin ou forfait)
        const serviceCategory = appointment.service.category;
        let serviceType = 'soin'; // Par d√©faut
        
        if (['led'].includes(serviceCategory)) {
            // LED ne compte pas dans la fid√©lit√© (trop petit prix)
            console.log(`‚ÑπÔ∏è LED th√©rapie pour ${appointment.client.name || appointment.client}: ne compte pas dans la fid√©lit√©`);
            return; // Sortir sans mettre √† jour la fid√©lit√©
        }
        
        // Services qui peuvent √™tre soins OU forfaits selon le choix client
        if (['hydrocleaning', 'renaissance', 'bbglow', 'hydronaissance'].includes(serviceCategory)) {
            // D√©terminer selon le prix pay√© ou les informations de forfait
            const servicePrice = appointment.pricing.servicePrice;
            const isPackage = appointment.packageInfo?.isPackage || false;
            
            if (isPackage || servicePrice > 200) {
                // Si c'est un forfait ou prix √©lev√© (forfait multiple s√©ances)
                serviceType = 'forfait';
            } else {
                // Si c'est une s√©ance unique
                serviceType = 'soin';
            }
        }
        
        // Ajouter le service √† la fid√©lit√©
        await loyalty.addService(serviceType, appointment.service.name);
        
        console.log(`‚úÖ Fid√©lit√© mise √† jour pour ${appointment.client.name || appointment.client}: +1 ${serviceType}`);
        
    } catch (error) {
        console.error('Erreur mise √† jour fid√©lit√©:', error);
    }
}

// Route pour obtenir les donn√©es de fid√©lit√© d'un client
app.get('/api/loyalty/:clientId', async (req, res) => {
    try {
        const { clientId } = req.params;
        
        let loyalty = await Loyalty.findOne({ client: clientId });
        if (!loyalty) {
            loyalty = new Loyalty({ client: clientId });
            await loyalty.save();
        }
        
        res.json({
            soinsCount: loyalty.soinsCount,
            forfaitsCount: loyalty.forfaitsCount,
            discountEarned10: loyalty.discountEarned10,
            discountEarned20: loyalty.discountEarned20,
            totalVisits: loyalty.totalVisits,
            lastActivity: loyalty.lastActivity,
            isExpired: loyalty.checkExpiration(),
            history: loyalty.history
        });
        
    } catch (error) {
        console.error('Erreur r√©cup√©ration fid√©lit√©:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour donner une remise exceptionnelle
app.post('/api/loyalty/:clientId/exceptional-discount', async (req, res) => {
    try {
        const { clientId } = req.params;
        const { amount, reason, notes } = req.body;
        
        let loyalty = await Loyalty.findOne({ client: clientId });
        if (!loyalty) {
            loyalty = new Loyalty({ client: clientId });
        }
        
        await loyalty.giveExceptionalDiscount(amount, reason, notes);
        
        res.json({
            message: 'Remise exceptionnelle accord√©e',
            loyalty: {
                discountEarned10: loyalty.discountEarned10,
                discountEarned20: loyalty.discountEarned20
            }
        });
        
    } catch (error) {
        console.error('Erreur remise exceptionnelle:', error);
        res.status(500).json({ message: error.message });
    }
});

// Route pour ajouter des points de fid√©lit√©
app.post('/api/loyalty/points', async (req, res) => {
    try {
        const { clientId, points, reason, timestamp } = req.body;
        
        let loyalty = await Loyalty.findOne({ client: clientId });
        if (!loyalty) {
            loyalty = await Loyalty.create({
                client: clientId,
                points: 0,
                totalPoints: 0,
                availableDiscounts: 0,
                history: []
            });
        }
        
        // Ajouter les points
        loyalty.points = (loyalty.points || 0) + points;
        loyalty.totalPoints = (loyalty.totalPoints || 0) + points;
        
        // Ajouter √† l'historique
        if (!loyalty.history) loyalty.history = [];
        loyalty.history.push({
            type: 'points_earned',
            points: points,
            reason: reason || 'Rendez-vous termin√©',
            date: new Date(timestamp || Date.now())
        });
        
        // Calculer les remises disponibles (50 points = 10‚Ç¨ de remise)
        const newDiscounts = Math.floor(loyalty.points / 50);
        if (newDiscounts > 0) {
            loyalty.availableDiscounts = (loyalty.availableDiscounts || 0) + newDiscounts;
            loyalty.points = loyalty.points % 50;
            
            loyalty.history.push({
                type: 'discount_earned',
                amount: newDiscounts * 10,
                date: new Date()
            });
        }
        
        await loyalty.save();
        
        res.json({
            success: true,
            totalPoints: loyalty.totalPoints,
            currentPoints: loyalty.points,
            availableDiscounts: loyalty.availableDiscounts,
            discountAmount: (loyalty.availableDiscounts || 0) * 10
        });
        
    } catch (error) {
        console.error('Erreur ajout points fid√©lit√©:', error);
        res.status(500).json({ message: error.message });
    }
});

// Route pour utiliser une remise
app.post('/api/loyalty/:clientId/use-discount', async (req, res) => {
    try {
        const { clientId } = req.params;
        const { amount, appointmentId, notes } = req.body;
        
        const loyalty = await Loyalty.findOne({ client: clientId });
        if (!loyalty) {
            return res.status(404).json({ message: 'Fid√©lit√© non trouv√©e' });
        }
        
        await loyalty.useDiscount(amount, appointmentId, notes);
        
        res.json({
            message: 'Remise utilis√©e',
            loyalty: {
                discountEarned10: loyalty.discountEarned10,
                discountEarned20: loyalty.discountEarned20
            }
        });
        
    } catch (error) {
        console.error('Erreur utilisation remise:', error);
        res.status(500).json({ message: error.message });
    }
});

// Route pour obtenir tous les clients avec leur fid√©lit√©
app.get('/api/admin/clients-loyalty', async (req, res) => {
    try {
        const clients = await User.find({ role: 'client' });
        const clientsWithLoyalty = [];
        
        for (const client of clients) {
            let loyalty = await Loyalty.findOne({ client: client._id });
            if (!loyalty) {
                loyalty = new Loyalty({ client: client._id });
                await loyalty.save();
            }
            
            clientsWithLoyalty.push({
                _id: client._id,
                name: client.name,
                email: client.email,
                phone: client.phone,
                loyalty: {
                    soinsCount: loyalty.soinsCount,
                    forfaitsCount: loyalty.forfaitsCount,
                    discountEarned10: loyalty.discountEarned10,
                    discountEarned20: loyalty.discountEarned20,
                    totalVisits: loyalty.totalVisits,
                    lastActivity: loyalty.lastActivity,
                    isExpired: loyalty.checkExpiration()
                }
            });
        }
        
        res.json({ clients: clientsWithLoyalty });
        
    } catch (error) {
        console.error('Erreur r√©cup√©ration clients fid√©lit√©:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour cr√©er le compte admin (une seule fois)
app.get('/create-admin-account', async (req, res) => {
    try {
        // V√©rifier si l'admin existe d√©j√†
        const existingAdmin = await User.findOne({ email: process.env.ADMIN_EMAIL });
        if (existingAdmin) {
            return res.json({ success: false, message: 'Compte admin d√©j√† existant' });
        }

        // Cr√©er le compte admin
        const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
        const adminUser = new User({
            name: 'Administrateur LAIA SKIN',
            email: process.env.ADMIN_EMAIL,
            password: hashedPassword,
            phone: '01 23 45 67 89',
            role: 'admin'
        });

        await adminUser.save();
        console.log('‚úÖ Compte admin cr√©√©');

        res.json({ 
            success: true, 
            message: 'Compte admin cr√©√© avec succ√®s',
            admin: {
                email: process.env.ADMIN_EMAIL,
                password: process.env.ADMIN_PASSWORD
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur cr√©ation admin:', error);
        res.status(500).json({ success: false, message: 'Erreur cr√©ation admin' });
    }
});

// Route debug pour v√©rifier les utilisateurs admin
app.get('/debug-admin', async (req, res) => {
    try {
        const admins = await User.find({ email: process.env.ADMIN_EMAIL });
        console.log('üîç Debug admin:', admins);
        res.json({ admins: admins.map(admin => ({ 
            _id: admin._id,
            name: admin.name, 
            email: admin.email, 
            role: admin.role,
            createdAt: admin.createdAt 
        })) });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route pour r√©initialiser le mot de passe admin
app.get('/reset-admin-password', async (req, res) => {
    try {
        const admin = await User.findOne({ email: process.env.ADMIN_EMAIL });
        if (!admin) {
            return res.json({ success: false, message: 'Admin non trouv√©' });
        }

        // R√©initialiser le mot de passe
        const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
        admin.password = hashedPassword;
        await admin.save();

        console.log('‚úÖ Mot de passe admin r√©initialis√©');
        res.json({ 
            success: true, 
            message: 'Mot de passe admin r√©initialis√©',
            credentials: {
                email: process.env.ADMIN_EMAIL,
                password: process.env.ADMIN_PASSWORD
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur r√©initialisation admin:', error);
        res.status(500).json({ success: false, message: 'Erreur serveur' });
    }
});

// Route pour r√©initialiser les mots de passe de tous les clients test
app.get('/reset-test-clients-passwords', async (req, res) => {
    try {
        const testEmails = ['marie@test.com', 'sophie@test.com', 'celia.ivorra95@hotmail.fr'];
        const results = [];

        for (const email of testEmails) {
            const client = await User.findOne({ email: email.toLowerCase(), role: 'client' });
            if (client) {
                const hashedPassword = await bcrypt.hash('test123', 10);
                client.password = hashedPassword;
                await client.save();
                results.push({ email, status: 'password reset' });
                console.log(`‚úÖ Mot de passe r√©initialis√© pour ${email}`);
            } else {
                results.push({ email, status: 'not found' });
            }
        }

        res.json({ 
            success: true, 
            message: 'Mots de passe clients r√©initialis√©s',
            results
        });

    } catch (error) {
        console.error('‚ùå Erreur r√©initialisation clients:', error);
        res.status(500).json({ success: false, message: 'Erreur serveur' });
    }
});

// Route PATCH pour mettre √† jour partiellement un rendez-vous
app.patch('/api/appointments/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const updates = req.body;
        
        const appointment = await Appointment.findByIdAndUpdate(
            id,
            updates,
            { new: true, runValidators: true }
        ).populate('client', 'name email phone');
        
        if (!appointment) {
            return res.status(404).json({ message: 'Rendez-vous non trouv√©' });
        }
        
        // Si le statut passe √† "termin√©", attribuer les points de fid√©lit√©
        if (updates.status === 'termin√©' && appointment.client) {
            try {
                const loyaltyResponse = await fetch(`http://localhost:${PORT}/api/loyalty/points`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        clientId: appointment.client._id,
                        points: 10,
                        reason: `Rendez-vous termin√©: ${appointment.service?.name || 'Service'}`,
                        timestamp: updates.completedAt || new Date().toISOString()
                    })
                });
                
                if (loyaltyResponse.ok) {
                    const loyaltyData = await loyaltyResponse.json();
                    console.log(`‚úÖ Points fid√©lit√© attribu√©s: ${loyaltyData.currentPoints} points`);
                }
            } catch (loyaltyError) {
                console.error('Erreur attribution points fid√©lit√©:', loyaltyError);
            }
        }
        
        res.json(appointment);
        
    } catch (error) {
        console.error('Erreur mise √† jour rendez-vous:', error);
        res.status(500).json({ message: error.message });
    }
});

// Route pour modifier un rendez-vous (date/heure)
app.put('/api/appointments/:id/reschedule', async (req, res) => {
    try {
        const { id } = req.params;
        const { date, time } = req.body;
        
        // V√©rification du token
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token manquant' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        
        // R√©cup√©rer l'ancien rendez-vous
        const oldAppointment = await Appointment.findById(id).populate('client');
        if (!oldAppointment) {
            return res.status(404).json({ message: 'Rendez-vous non trouv√©' });
        }
        
        // V√©rifier que le client peut modifier ce rendez-vous
        if (decoded.role !== 'admin' && oldAppointment.client._id.toString() !== decoded.userId) {
            return res.status(403).json({ message: 'Non autoris√©' });
        }
        
        console.log(`üîÑ Modification RDV ${id}: ${date} ${time}`);
        
        // Convertir la nouvelle date/heure
        const dateParts = date.split('/'); // ["15", "08", "2025"]
        let timeParts;
        if (time.includes('h')) {
            timeParts = time.split('h'); // "14h00" -> ["14", "00"]
        } else {
            timeParts = time.split(':'); // "14:00" -> ["14", "00"]
        }
        
        const newDatetime = new Date(
            parseInt(dateParts[2]), // ann√©e
            parseInt(dateParts[1]) - 1, // mois (0-index√©)
            parseInt(dateParts[0]), // jour
            parseInt(timeParts[0]), // heures
            parseInt(timeParts[1] || '0') // minutes
        );
        
        console.log('üêû DEBUG - Nouvelle date convertie:', newDatetime);
        
        // V√©rifier la disponibilit√© du nouveau cr√©neau
        const existingAppointment = await Appointment.findOne({
            datetime: newDatetime,
            _id: { $ne: id }, // Exclure le rendez-vous actuel
            status: { $ne: 'annul√©' }
        });
        
        if (existingAppointment) {
            return res.status(409).json({ message: 'Cr√©neau d√©j√† occup√©' });
        }
        
        // Mettre √† jour le rendez-vous
        oldAppointment.datetime = newDatetime;
        oldAppointment.notes.admin += ` | Modifi√© le ${new Date().toLocaleString('fr-FR')}`;
        await oldAppointment.save();
        
        // Vider le cache des cr√©neaux occup√©s
        cachedOccupiedSlots = null;
        cacheExpiry = null;
        console.log('üîÑ Cache cr√©neaux occup√©s vid√©');
        
        res.json({ 
            success: true,
            message: 'Rendez-vous reprogramm√© avec succ√®s',
            appointment: oldAppointment,
            oldDatetime: oldAppointment.datetime,
            newDatetime: newDatetime
        });
        
    } catch (error) {
        console.error('‚ùå Erreur modification rendez-vous:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// === ROUTES R√âINITIALISATION MOT DE PASSE ===

// Demande de r√©initialisation de mot de passe
app.post('/api/auth/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;
        
        const user = await User.findOne({ email: email.toLowerCase() });
        if (!user) {
            // Pour la s√©curit√©, on renvoie le m√™me message m√™me si l'utilisateur n'existe pas
            return res.json({ message: 'Si cet email existe, un lien de r√©initialisation a √©t√© envoy√©.' });
        }
        
        // G√©n√©rer le token de r√©initialisation (version test simplifi√©e)
        const crypto = require('crypto');
        const resetToken = crypto.randomBytes(32).toString('hex');
        
        // POUR TEST : stocker le token en clair (en production, il faut le hasher)
        user.resetPasswordToken = resetToken;
        user.resetPasswordExpires = Date.now() + 10 * 60 * 1000; // 10 minutes
        await user.save();
        
        console.log(`üîê Token de r√©initialisation g√©n√©r√© pour: ${user.email}`);
        
        // Cr√©er l'URL de r√©initialisation
        const resetUrl = `${req.protocol}://${req.get('host')}/reset-password.html?token=${resetToken}`;
        
        // Mode test : afficher le lien dans la console au lieu d'envoyer l'email
        console.log(`\nüîó LIEN DE R√âINITIALISATION TEST:`);
        console.log(`üìß Pour: ${user.email} (${user.name})`);
        console.log(`üîó Lien: ${resetUrl}`);
        console.log(`‚è∞ Expire dans 10 minutes\n`);
        
        // En mode production, d√©commentez ces lignes et commentez le bloc ci-dessus
        // process.nextTick(async () => {
        //     try {
        //         await sendPasswordResetEmail(user.email, user.name, resetUrl);
        //         console.log(`‚úÖ Email de r√©initialisation envoy√© √†: ${user.email}`);
        //     } catch (error) {
        //         console.error('‚ùå Erreur envoi email r√©initialisation:', error);
        //     }
        // });
        
        res.json({ message: 'Si cet email existe, un lien de r√©initialisation a √©t√© envoy√©.' });
    } catch (error) {
        console.error('‚ùå Erreur demande r√©initialisation:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// R√©initialisation du mot de passe avec token
app.post('/api/auth/reset-password', async (req, res) => {
    console.log(`üîÑ Route reset-password appel√©e`);
    console.log(`üì¶ Body re√ßu:`, req.body);
    
    try {
        const { token, newPassword } = req.body;
        
        if (!token || !newPassword) {
            return res.status(400).json({ message: 'Token et nouveau mot de passe requis' });
        }
        
        console.log(`üîç Debug token de r√©initialisation:`);
        console.log(`üì• Token re√ßu: ${token}`);
        console.log(`‚è∞ Timestamp actuel: ${Date.now()}`);
        
        // VERSION TEST : comparer directement sans hash
        const user = await User.findOne({
            resetPasswordToken: token,
            resetPasswordExpires: { $gt: Date.now() }
        });
        
        console.log(`üë§ Utilisateur trouv√©: ${user ? user.email : 'Aucun'}`);
        
        if (!user) {
            // Chercher sans la condition d'expiration pour voir si le token existe
            const userToken = await User.findOne({
                resetPasswordToken: token
            });
            
            if (userToken) {
                console.log(`‚è∞ Token expir√© pour: ${userToken.email}, expire: ${userToken.resetPasswordExpires}, maintenant: ${Date.now()}`);
                return res.status(400).json({ message: 'Token expir√©' });
            } else {
                console.log(`‚ùå Token introuvable dans la base`);
                return res.status(400).json({ message: 'Token invalide' });
            }
        }
        
        // R√©initialiser le mot de passe
        user.password = newPassword;
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        await user.save();
        
        console.log(`üîÑ Mot de passe r√©initialis√© pour: ${user.email}`);
        
        res.json({ message: 'Mot de passe r√©initialis√© avec succ√®s' });
    } catch (error) {
        console.error('‚ùå Erreur r√©initialisation mot de passe:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Modification du mot de passe (utilisateur connect√©)
app.post('/api/auth/change-password', async (req, res) => {
    try {
        const { currentPassword, newPassword } = req.body;
        
        if (!currentPassword || !newPassword) {
            return res.status(400).json({ message: 'Mot de passe actuel et nouveau mot de passe requis' });
        }
        
        // V√©rifier le token JWT
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ message: 'Token manquant' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await User.findById(decoded.userId);
        if (!user) {
            return res.status(404).json({ message: 'Utilisateur non trouv√©' });
        }
        
        // V√©rifier le mot de passe actuel
        const bcrypt = require('bcryptjs');
        const isValidPassword = await bcrypt.compare(currentPassword, user.password);
        if (!isValidPassword) {
            return res.status(400).json({ message: 'Mot de passe actuel incorrect' });
        }
        
        // Mettre √† jour le mot de passe
        user.password = newPassword;
        await user.save();
        
        console.log(`üîÑ Mot de passe modifi√© pour: ${user.email}`);
        
        res.json({ message: 'Mot de passe modifi√© avec succ√®s' });
    } catch (error) {
        console.error('‚ùå Erreur modification mot de passe:', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Fonction pour envoyer l'email de r√©initialisation
async function sendPasswordResetEmail(email, name, resetUrl) {
    const emailHtml = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #d4a574; font-family: 'Playfair Display', serif;">Laia Skin Institut</h1>
                <p style="color: #666; font-style: italic;">Une peau respect√©e, une beaut√© affirm√©e</p>
            </div>
            
            <div style="background: linear-gradient(135deg, #f7f1e8, #ffffff); padding: 30px; border-radius: 15px; border: 2px solid #d4a574;">
                <h2 style="color: #8b6f47; margin-bottom: 20px;">üîê R√©initialisation de votre mot de passe</h2>
                
                <p>Bonjour <strong>${name}</strong>,</p>
                
                <p>Vous avez demand√© la r√©initialisation de votre mot de passe pour votre espace client Laia Skin Institut.</p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${resetUrl}" style="background: linear-gradient(135deg, #d4a574, #c9a084); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; display: inline-block;">
                        ‚ú® R√©initialiser mon mot de passe
                    </a>
                </div>
                
                <p style="font-size: 14px; color: #666;">
                    ‚è∞ <strong>Important :</strong> Ce lien est valide pendant 10 minutes seulement pour votre s√©curit√©.
                </p>
                
                <p style="font-size: 14px; color: #666;">
                    Si vous n'avez pas demand√© cette r√©initialisation, ignorez simplement cet email. Votre mot de passe actuel reste inchang√©.
                </p>
                
                <hr style="margin: 30px 0; border: none; border-top: 1px solid #d4a574;">
                
                <div style="text-align: center; color: #888; font-size: 12px;">
                    <p>Laia Skin Institut - Institut de beaut√© & soins du visage</p>
                    <p>üìß ${process.env.SMTP_FROM_EMAIL} | üì± Votre num√©ro</p>
                </div>
            </div>
        </div>
    `;
    
    const mailOptions = {
        from: `"Laia Skin Institut" <${process.env.SMTP_FROM_EMAIL}>`,
        to: email,
        subject: 'üîê R√©initialisation de votre mot de passe - Laia Skin Institut',
        html: emailHtml
    };
    
    await transporter.sendMail(mailOptions);
}

// Route debug pour voir tous les utilisateurs Marie
app.get('/debug-marie', async (req, res) => {
    try {
        const maries = await User.find({ $or: [
            { email: 'marie@test.com' },
            { email: 'marie.dupont@email.com' },
            { name: /Marie/i }
        ]});
        
        console.log('üîç Debug Marie:', maries);
        res.json({ maries: maries.map(marie => ({ 
            _id: marie._id,
            name: marie.name, 
            email: marie.email, 
            role: marie.role,
            createdAt: marie.createdAt 
        })) });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

process.on('SIGINT', () => {
    console.log('\nüëã Arr√™t du serveur LAIA SKIN INSTITUT');
    mongoose.connection.close();
    process.exit(0);
});